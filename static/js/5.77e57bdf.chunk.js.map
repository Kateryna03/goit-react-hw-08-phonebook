{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","redux/contacts/selectors.js","redux/contacts/operations.js","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/Contacts/Contacts.jsx"],"names":["module","exports","getLoadind","state","loading","getContacts","contactsReducer","contacts","getNormolizedContacts","createSelector","filter","normolizedContactsFilter","toLowerCase","contact","name","includes","fetchContact","dispatch","getState","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","ContactsForm","useDispatch","useSelector","console","log","useState","setName","number","setNumber","handleChange","e","target","value","currentTarget","onAddContact","addContactRequest","post","addContactSuccess","addContactError","addContact","alreadyExistsContact","some","reset","className","s","form","onSubmit","preventDefault","alert","Box","sx","display","alignItems","m","TextField","helperText","label","type","onChange","id","pattern","title","required","Button","variant","color","size","onClick","ContactList","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","useEffect","List","width","maxWidth","bgcolor","map","ListItem","secondaryAction","Stack","direction","spacing","startIcon","ListItemAvatar","Avatar","alt","src","ListItemText","marginLeft","primary","secondary","Fragment","Typography","component","prototype","PropTypes","string","isRequired","handleDeleteContact","func","array","Filter","Paper","p","outline","InputBase","ml","flex","placeholder","inputProps","filterContacts","require","IconButton","defaultProps","onChangeFilter","barStyles","marginBottom","Contacts","isLoading","style"],"mappings":"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","file":"static/js/5.77e57bdf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__1ZJ3w\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoadind = state => state.loading;\nexport const getContacts = state => state.contactsReducer.contacts;\nexport const getFilter = state => state.contactsReducer.filter;\n\n//композитный(составной)селектор - переношу логику из контактЛист- мемоизирую селектор\nexport const getNormolizedContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    //если контактс и фильтр не изменились - перерендер не выполняется а берется последний - глубина кэша 1\n    const normolizedContactsFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normolizedContactsFilter);\n    });\n  },\n);\n// const filteredContacts = (contacts, filter) =>\n//   contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n\n// const finishFilterContacts = filteredContacts(contacts, filter);\n\n//console.log('ОТФИЛЬТРОВАННЫЕ КОНТАКТЫ', finishFilterContacts);\n","//import { createAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from '../contacts/actions';\n\n//axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n//http://localhost:3030';\n// const token = {\n//   set(token) {\n//     axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n//   },\n\n//   unset() {\n//     axios.defaults.headers.common.Authorization = '';\n//   },\n// };\n\nconst fetchContact = () => async (dispatch, getState) => {\n  dispatch(fetchContactRequest());\n\n  // token.set(getState().auth.token);\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n  //синхрон\n  //   axios\n  //     .get('/contacts')\n  //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n  //     .catch(error => dispatch(fetchContactError(error.message)));\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n    //completed: false,\n  };\n\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n\n  //   axios\n  //     .post('/contacts', contact)\n  //     .then(({ data }) => dispatch(addContactSuccess(data)))\n  //     .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  //   axios\n  //     .delete(`/contacts/${contactId}`)\n  //     .then(() => dispatch(deleteContactSuccess(contactId)))\n  //     .catch(error => dispatch(deleteContactError(error)));\n};\n\n// const deleteContact = createAction('contacts/DeleteContact');\n// const filterContacts = createAction('contacts/FilterContact');\n\nexport { addContact, deleteContact, fetchContact };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport s from './ContactsForm.module.css';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nfunction ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  console.log('#####FORMcontacts', contacts);\n  //const contacts = useSelector(state => state.сontactsReduscer);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n\n    console.log('VALUE:', e.currentTarget);\n    console.log('NAME:', [name]);\n  };\n\n  const onAddContact = (name, number) => {\n    dispatch(addContact(name, number));\n  };\n\n  const alreadyExistsContact = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (alreadyExistsContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    onAddContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        className={s.form}\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        {/* <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label> */}\n        {/* <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button> */}\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            '& > :not(style)': { m: 1 },\n          }}\n        >\n          <TextField\n            helperText=\"Please enter the name\"\n            //id=\"demo-helper-text-aligned\"\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n          <TextField\n            helperText=\"Please enter the number \"\n            //id=\"demo-helper-text-aligned\"\n            label=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </Box>\n        <Box sx={{ '& button': { m: 1 } }}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"medium\"\n            type=\"submit\"\n            onClick={() => {\n              console.log('add contakt');\n            }}\n          >\n            add contact\n          </Button>\n        </Box>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n// export default function HelperTextAligned() {\n//   return (\n//     <Box\n//       sx={{\n//         display: 'flex',\n//         alignItems: 'center',\n//         '& > :not(style)': { m: 1 },\n//       }}\n//     >\n//       <TextField\n//         helperText=\"Please enter your name\"\n//         id=\"demo-helper-text-aligned\"\n//         label=\"Name\"\n//       />\n//       <TextField\n//         helperText=\" \"\n//         id=\"demo-helper-text-aligned-no-helper\"\n//         label=\"Name\"\n//       />\n//     </Box>\n//   );\n// }\n","import { useDispatch, useSelector } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Stack from '@mui/material/Stack';\n\nimport { useEffect } from 'react';\nimport { fetchContact, deleteContact } from 'redux/contacts/operations';\nimport { getLoadind, getNormolizedContacts } from 'redux/contacts/selectors';\n\n//import * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\n//import Divider from '@mui/material/Divider';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getNormolizedContacts);\n  const loading = useSelector(getLoadind);\n  console.log('!!!!!CONTACTS', contacts);\n  //const filter = useSelector(getFilter);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    // <ul>\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      {loading ? (\n        <h1>LOADING...</h1>\n      ) : (\n        contacts.map(({ id, name, number }) => (\n          <ListItem\n            key={id}\n            //disableGutters\n            alignItems=\"flex-start\"\n            secondaryAction={\n              <Stack direction=\"row\" spacing={2}>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<DeleteIcon />}\n                  type=\"button\"\n                  onClick={() => onDeleteContact(id)}\n                >\n                  Delete\n                </Button>\n              </Stack>\n            }\n          >\n            <ListItemAvatar>\n              <Avatar alt={name} src=\"/static/images/avatar/1.jpg\" />\n            </ListItemAvatar>\n            <ListItemText\n              marginLeft=\"20\"\n              primary={name}\n              secondary={\n                <React.Fragment>\n                  <Typography\n                    sx={{ display: 'inline' }}\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"text.primary\"\n                  >\n                    {number}\n                  </Typography>\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        ))\n      )}\n    </List>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\n//import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SearchIcon from '@mui/icons-material/Search';\nimport DirectionsIcon from '@mui/icons-material/Directions';\n\n// export default function CustomizedInputBase() {\n//   return (\n//     <Paper\n//       component=\"form\"\n//       sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: 400 }}\n//     >\n//       <IconButton sx={{ p: '10px' }} aria-label=\"menu\">\n//         <MenuIcon />\n//       </IconButton>\n//       <InputBase\n//         sx={{ ml: 1, flex: 1 }}\n//         placeholder=\"Search Google Maps\"\n//         inputProps={{ 'aria-label': 'search google maps' }}\n//       />\n//       <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n//         <SearchIcon />\n//       </IconButton>\n//       <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n//       <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\n//         <DirectionsIcon />\n//       </IconButton>\n//     </Paper>\n//   );\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const findContact = name => {\n    dispatch(filterContacts(name.toLowerCase()));\n  };\n\n  const onChangeFilter = e => {\n    findContact(e.target.value);\n  };\n  return (\n    // <label>\n    //   Find contacts by name\n    //   <input\n    //     type=\"text\"\n    //     value={filter}\n    //     onChange={onChangeFilter}\n    //     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n    //     required\n    //   />\n    // </label>\n    <Paper\n      component=\"form\"\n      sx={{\n        p: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 335,\n        outline: 'primary',\n      }}\n    >\n      <InputBase\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Find contacts by name\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        require\n      />\n      <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      {/* <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" /> */}\n      {/* <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\n        <DirectionsIcon />\n      </IconButton> */}\n    </Paper>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getLoadind } from 'redux/contacts/selectors';\nimport { fetchContact } from 'redux/contacts/operations';\n//import Container from 'components/Container/Container';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nconst barStyles = {\n  // display: 'flex',\n  // alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoadind);\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    <>\n      <div style={barStyles}>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && <h1>Загружаем...</h1>}\n        <ContactList />\n      </div>\n    </>\n  );\n}\nexport default Contacts;\n"],"sourceRoot":""}
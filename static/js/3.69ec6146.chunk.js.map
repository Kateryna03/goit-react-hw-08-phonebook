{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","redux/contacts/selectors.js","redux/contacts/operations.js","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/Contacts/Contacts.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","getLoadind","state","loading","getContacts","contactsReducer","contacts","getNormolizedContacts","createSelector","filter","normolizedContactsFilter","toLowerCase","contact","name","includes","fetchContact","dispatch","getState","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","ContactsForm","useDispatch","useSelector","console","log","useState","setName","number","setNumber","handleChange","e","target","currentTarget","onAddContact","addContactRequest","post","addContactSuccess","addContactError","addContact","alreadyExistsContact","some","reset","onSubmit","preventDefault","alert","htmlFor","type","onChange","id","pattern","title","required","onClick","ContactList","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","useEffect","map","prototype","PropTypes","string","isRequired","handleDeleteContact","func","array","Filter","filterContacts","defaultProps","onChangeFilter","barStyles","marginBottom","Contacts","isLoading","style"],"mappings":"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","file":"static/js/3.69ec6146.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoadind = state => state.loading;\nexport const getContacts = state => state.contactsReducer.contacts;\nexport const getFilter = state => state.contactsReducer.filter;\n\n//композитный(составной)селектор - переношу логику из контактЛист- мемоизирую селектор\nexport const getNormolizedContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    //если контактс и фильтр не изменились - перерендер не выполняется а берется последний - глубина кэша 1\n    const normolizedContactsFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normolizedContactsFilter);\n    });\n  },\n);\n// const filteredContacts = (contacts, filter) =>\n//   contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n\n// const finishFilterContacts = filteredContacts(contacts, filter);\n\n//console.log('ОТФИЛЬТРОВАННЫЕ КОНТАКТЫ', finishFilterContacts);\n","//import { createAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from '../contacts/actions';\n\n//axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n//http://localhost:3030';\n// const token = {\n//   set(token) {\n//     axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n//   },\n\n//   unset() {\n//     axios.defaults.headers.common.Authorization = '';\n//   },\n// };\n\nconst fetchContact = () => async (dispatch, getState) => {\n  dispatch(fetchContactRequest());\n\n  // token.set(getState().auth.token);\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n  //синхрон\n  //   axios\n  //     .get('/contacts')\n  //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n  //     .catch(error => dispatch(fetchContactError(error.message)));\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n    //completed: false,\n  };\n\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n\n  //   axios\n  //     .post('/contacts', contact)\n  //     .then(({ data }) => dispatch(addContactSuccess(data)))\n  //     .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  //   axios\n  //     .delete(`/contacts/${contactId}`)\n  //     .then(() => dispatch(deleteContactSuccess(contactId)))\n  //     .catch(error => dispatch(deleteContactError(error)));\n};\n\n// const deleteContact = createAction('contacts/DeleteContact');\n// const filterContacts = createAction('contacts/FilterContact');\n\nexport { addContact, deleteContact, fetchContact };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nfunction ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  console.log('#####FORMcontacts', contacts);\n  //const contacts = useSelector(state => state.сontactsReduscer);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n\n    console.log('VALUE:', e.currentTarget);\n    console.log('NAME:', [name]);\n  };\n\n  const onAddContact = (name, number) => {\n    dispatch(addContact(name, number));\n  };\n\n  const alreadyExistsContact = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (alreadyExistsContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    onAddContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n/////////CLASS///////////////////////////////////////////////////////\n// import React, { Component } from 'react';\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // console.log(\"VALUE:\", e.currentTarget);\n//     // console.log(\"NAME:\", [name]);\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     e.preventDefault();\n//     this.props.onSubmit(name, number);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           onSubmit={this.handleSubmit}\n//           //   onSubmit={(e) => {\n//           //     e.preventDefault();\n//           //     console.log(e.currentTarget);\n//           //   }}\n//         >\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//               id={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n//           <label>\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//               id={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button\n//             onClick={() => {\n//               console.log('add contakt');\n//             }}\n//             type=\"submit\"\n//           >\n//             add contact\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactsForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContact, deleteContact } from 'redux/contacts/operations';\nimport {\n  getLoadind,\n  //getFilter,\n  getNormolizedContacts,\n} from 'redux/contacts/selectors';\n//import { getContacts } from 'redux/contacts/selectors';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getNormolizedContacts);\n  const loading = useSelector(getLoadind);\n  console.log('!!!!!CONTACTS', contacts);\n  //const filter = useSelector(getFilter);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    <ul>\n      {loading ? (\n        <h1>LOADING...</h1>\n      ) : (\n        contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>{name}</p>\n            <p>{number}</p>\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\n              delete contact\n            </button>\n          </li>\n        ))\n      )}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n// const mapDispatchToProps = dispatch => ({\n//   fetchContactsBD: () => dispatch(fetchContact),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactList);\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const findContact = name => {\n    dispatch(filterContacts(name.toLowerCase()));\n  };\n\n  const onChangeFilter = e => {\n    findContact(e.target.value);\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getLoadind } from 'redux/contacts/selectors';\nimport { fetchContact } from 'redux/contacts/operations';\n//import Container from 'components/Container/Container';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nconst barStyles = {\n  // display: 'flex',\n  // alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoadind);\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    <>\n      <div style={barStyles}>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && <h1>Загружаем...</h1>}\n        <ContactList />\n      </div>\n    </>\n  );\n}\nexport default Contacts;\n"],"sourceRoot":""}
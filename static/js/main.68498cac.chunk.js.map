{"version":3,"sources":["components/Navigation/Navigation.module.css","redux/contacts/operations.js","redux/contacts/selectors.js","redux/auth/auth-operations.js","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","redux/auth/auth-actions.js","components/Filter/Filter.jsx","redux/contacts/actions.js","components/AppBar/AppBar.module.css","redux/contacts/reducer.js","redux/auth/auth-slice.js","redux/store.js","redux/auth/auth-selectors.js","components/PublicRoute/PublicRoute.js","components/AuthNav/AuthNav.js","components/UserMenu/UserMenu.js","components/Navigation/Navigation.js","components/AppBar/AppBar.jsx","components/PrivateRoute/PrivateRoute.jsx","App/App.js","index.js"],"names":["module","exports","token","axios","defaults","headers","common","Authorization","fetchContact","dispatch","getState","a","fetchContactRequest","auth","get","data","fetchContactSuccess","fetchContactError","message","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getLoadind","state","loading","getContacts","contactsReducer","contacts","getNormolizedContacts","createSelector","filter","normolizedContactsFilter","toLowerCase","includes","baseURL","register","credentials","registerRequest","console","log","registerSuccess","registerError","login","logInRequest","logInSuccess","logInError","logout","logOutRequest","logOutSuccess","logOutError","getUser","persistedToken","getUserRequest","getUserSuccess","getUserError","ContactsForm","useDispatch","useSelector","useState","setName","setNumber","handleChange","e","target","value","currentTarget","alreadyExistsContact","some","reset","onSubmit","preventDefault","alert","onAddContact","htmlFor","type","onChange","id","pattern","title","required","onClick","ContactList","useEffect","map","onDeleteContact","prototype","PropTypes","string","isRequired","handleDeleteContact","func","array","createAction","Filter","filterContacts","defaultProps","onChangeFilter","createReducer","_","payload","combineReducers","initialUserState","email","user","isLoggedIn","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","getisLoggedIn","getUserName","PublicRoute","children","restricted","rest","shouldRedirect","to","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","AuthNav","exact","style","activeStyle","container","alignItems","avatar","marginRight","UserMenu","Navigation","className","nav","activeClassName","AppBar","header","PrivateRoute","StartPage","lazy","RegisterView","LoginView","Contacts","App","fallback","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68498cac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__12o2K\",\"activeLink\":\"Navigation_activeLink__2rUFB\",\"nav\":\"Navigation_nav__INfuO\",\"search\":\"Navigation_search__3dsyO\"};","//import { createAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from '../contacts/actions';\n\n//axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n//http://localhost:3030';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nconst fetchContact = () => async (dispatch, getState) => {\n  dispatch(fetchContactRequest());\n\n  token.set(getState().auth.token);\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n  //синхрон\n  //   axios\n  //     .get('/contacts')\n  //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n  //     .catch(error => dispatch(fetchContactError(error.message)));\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n    //completed: false,\n  };\n\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n\n  //   axios\n  //     .post('/contacts', contact)\n  //     .then(({ data }) => dispatch(addContactSuccess(data)))\n  //     .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  //   axios\n  //     .delete(`/contacts/${contactId}`)\n  //     .then(() => dispatch(deleteContactSuccess(contactId)))\n  //     .catch(error => dispatch(deleteContactError(error)));\n};\n\n// const deleteContact = createAction('contacts/DeleteContact');\n// const filterContacts = createAction('contacts/FilterContact');\n\nexport { addContact, deleteContact, fetchContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoadind = state => state.loading;\nexport const getContacts = state => state.contactsReducer.contacts;\nexport const getFilter = state => state.contactsReducer.filter;\n\n//композитный(составной)селектор - переношу логику из контактЛист- мемоизирую селектор\nexport const getNormolizedContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    //если контактс и фильтр не изменились - перерендер не выполняется а берется последний - глубина кэша 1\n    const normolizedContactsFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normolizedContactsFilter);\n    });\n  },\n);\n// const filteredContacts = (contacts, filter) =>\n//   contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n\n// const finishFilterContacts = filteredContacts(contacts, filter);\n\n//console.log('ОТФИЛЬТРОВАННЫЕ КОНТАКТЫ', finishFilterContacts);\n","// //import { createAction } from '@reduxjs/toolkit';\n// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n// import { registerError } from './auth-actions';\n\n// // import {\n// //   addContactRequest,\n// //   addContactSuccess,\n// //   addContactError,\n// //   deleteContactRequest,\n// //   deleteContactSuccess,\n// //   deleteContactError,\n// //   fetchContactRequest,\n// //   fetchContactSuccess,\n// //   fetchContactError,\n// // } from './actions';\n\n// // 'https://connections-api.herokuapp.com;';\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com;';\n\n// // const fetchContact = () => async dispatch => {\n// //   dispatch(fetchContactRequest());\n// //   try {\n// //     const { data } = await axios.get('/contacts');\n// //     dispatch(fetchContactSuccess(data));\n// //   } catch (error) {\n// //     dispatch(fetchContactError(error.message));\n\n// export { register, logIn, logOut };\nimport axios from 'axios';\nimport {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logInRequest,\n  logInSuccess,\n  logInError,\n  logOutRequest,\n  logOutSuccess,\n  logOutError,\n  getUserRequest,\n  getUserSuccess,\n  getUserError,\n} from '../auth/auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n//registration\nconst register = credentials => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n    console.log('####register DATA', data);\n    token.set(data.token);\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    dispatch(registerError(error.message));\n  }\n};\n// const register = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/signup', credentials);\n//     return data;\n//   } catch (error) {\n//     //dispatch(registerError(error));\n//     console.log(error.message);\n//   }\n// });\n\nconst login = credentials => async dispatch => {\n  dispatch(logInRequest());\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n    console.log('####Login DATA', data);\n    token.set(data.token); //обязательно сохраняем токен ктр автоматом после сохранения будет при любом запросе\n    dispatch(logInSuccess(data));\n  } catch (error) {\n    dispatch(logInError(error.message));\n  }\n};\n// const logIn = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/login', credentials);\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// });\nconst logout = credentials => async dispatch => {\n  dispatch(logOutRequest());\n  try {\n    const { data } = await axios.post('/users/logout', credentials);\n    console.log('####Login DATA', data);\n    console.log('###Credentials', credentials);\n    token.unset(data.token); //снимаем токен с загаловка\n    dispatch(logOutSuccess(data));\n  } catch (error) {\n    dispatch(logOutError(error.message));\n  }\n};\n// const logOut = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/logout', credentials);\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// });\nconst getUser = () => async (dispatch, getState) => {\n  // console.log('getStateTOKEN:', getState(token));\n  // auth:\n  // isLoggedIn: true\n  // token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTY1NWEzZjdiYjg0YjAwMTUyZDY4MjgiLCJpYXQiOjE2MzQwNzEzMjh9.gaJJbnd-VmRCCmPchBGA8oi1JO6eGdOoshYePLgDtKk\"\n  // user: {name: 'Okeksii', email: 'oleksii@gmail.com'}\n\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) return;\n\n  token.set(persistedToken);\n\n  dispatch(getUserRequest());\n\n  try {\n    const { data } = await axios.get('/users/current');\n\n    dispatch(getUserSuccess(data));\n  } catch (error) {\n    dispatch(getUserError(error.message));\n  }\n};\n// const fetchCurrentUser = createAsyncThunk(\n//   'auth/refresh',\n//   async (_, thunkAPI) => {\n//     const state = thunkAPI.getState();\n//     const persistedToken = state.auth.token;\n\n//     if (persistedToken === null) {\n//       console.log('Токена нет, уходим из fetchCurrentUser');\n//       return thunkAPI.rejectWithValue();\n//     }\n\n//     token.set(persistedToken);\n//     try {\n//       const { data } = await axios.get('/users/current');\n//       return data;\n//     } catch (error) {\n//       // TODO: Добавить обработку ошибки error.message\n//     }\n//   },\n// );\n\nexport { register, login, logout, getUser };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nfunction ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  console.log('#####FORMcontacts', contacts);\n  //const contacts = useSelector(state => state.сontactsReduscer);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n\n    console.log('VALUE:', e.currentTarget);\n    console.log('NAME:', [name]);\n  };\n\n  const onAddContact = (name, number) => {\n    dispatch(addContact(name, number));\n  };\n\n  const alreadyExistsContact = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (alreadyExistsContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    onAddContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n/////////CLASS///////////////////////////////////////////////////////\n// import React, { Component } from 'react';\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // console.log(\"VALUE:\", e.currentTarget);\n//     // console.log(\"NAME:\", [name]);\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     e.preventDefault();\n//     this.props.onSubmit(name, number);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           onSubmit={this.handleSubmit}\n//           //   onSubmit={(e) => {\n//           //     e.preventDefault();\n//           //     console.log(e.currentTarget);\n//           //   }}\n//         >\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//               id={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n//           <label>\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//               id={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button\n//             onClick={() => {\n//               console.log('add contakt');\n//             }}\n//             type=\"submit\"\n//           >\n//             add contact\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactsForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContact, deleteContact } from 'redux/contacts/operations';\nimport {\n  getLoadind,\n  //getFilter,\n  getNormolizedContacts,\n} from 'redux/contacts/selectors';\n//import { getContacts } from 'redux/contacts/selectors';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getNormolizedContacts);\n  const loading = useSelector(getLoadind);\n  console.log('!!!!!CONTACTS', contacts);\n  //const filter = useSelector(getFilter);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    <ul>\n      {loading ? (\n        <h1>LOADING...</h1>\n      ) : (\n        contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>{name}</p>\n            <p>{number}</p>\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\n              delete contact\n            </button>\n          </li>\n        ))\n      )}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n// const mapDispatchToProps = dispatch => ({\n//   fetchContactsBD: () => dispatch(fetchContact),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactList);\n","import { createAction } from '@reduxjs/toolkit';\n\n//register - 3 экшна, чтоб забрать\nexport const registerRequest = createAction('auth/registerRequest');\nexport const registerSuccess = createAction('auth/registerSuccess');\nexport const registerError = createAction('auth/registerError');\n\n//login\nexport const logInRequest = createAction('auth/logInRequest');\nexport const logInSuccess = createAction('auth/logInSuccess');\nexport const logInError = createAction('auth/logInError');\n//logout\n\nexport const logOutRequest = createAction('auth/logOutRequest');\nexport const logOutSuccess = createAction('auth/logOutSuccess');\nexport const logOutError = createAction('auth/logOutError');\n\n//Current User\n\nexport const getUserRequest = createAction('auth/getUserRequest');\nexport const getUserSuccess = createAction('auth/getUserSuccess');\nexport const getUserError = createAction('auth/getUserError');\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const findContact = name => {\n    dispatch(filterContacts(name.toLowerCase()));\n  };\n\n  const onChangeFilter = e => {\n    findContact(e.target.value);\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { createAction } from '@reduxjs/toolkit';\n\n//FETCH - 3 экшна, чтоб забрать\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\n//ADD CONTACT\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n//DELETE CONTACT\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/FilterContact');\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__1Yk8v\"};","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  addContactError,\n  addContactRequest,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from '../contacts/actions';\n\n// const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\nconst contacts = createReducer(\n  // localStorageContacts ??\n  [\n    // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => {\n      const inContacts = [payload, ...state];\n      // localStorage.setItem('contacts', JSON.stringify(inContacts));\n      return inContacts;\n    },\n\n    [deleteContactSuccess]: (state, { payload }) => {\n      const removedFromContacts = state.filter(({ id }) => id !== payload);\n      // localStorage.setItem('contacts', JSON.stringify(removedFromContacts));\n      return removedFromContacts;\n    },\n  },\n);\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\nexport default combineReducers({ contacts, filter, loading });\n","// import { register, logIn, logOut } from '../auth/auth-operations';\n// import { createSlice } from '@reduxjs/toolkit';\n\n// // const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\n// const initialState = {\n//   user: { name: null, email: null },\n//   token: null,\n//   isLoggedIn: false,\n// };\n\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   extraReducers: {\n//     [register.fulfilled](state, action) {\n//       state.user = action.payload.user;\n//       state.token = action.payload.token;\n//       state.isLoggedIn = true;\n//     },\n//     [logIn.fulfilled](state, action) {\n//       state.user = action.payload.user;\n//       state.token = action.payload.token;\n//       state.isLoggedIn = true;\n//     },\n//     [logOut.fulfilled](state, action) {\n//       state.user = { name: null, email: null };\n//       state.token = null;\n//       state.isLoggedIn = false;\n//     },\n//     // [authOperations.fetchCurrentUser.fulfilled](state, action) {\n//     //   state.user = action.payload;\n//     //   state.isLoggedIn = true;\n//     // },\n//   },\n// });\n\n// export default authSlice.reducer;\n///////////////////////////////////////////////////////////////////////////\n//import { combineReducers } from 'redux';\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  registerSuccess,\n  registerError,\n  registerRequest,\n  logInRequest,\n  logInSuccess,\n  logInError,\n  logOutRequest,\n  logOutSuccess,\n  logOutError,\n  getUserRequest,\n  getUserSuccess,\n  getUserError,\n} from '../auth/auth-actions';\n\n// const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\nconst initialUserState = {\n  name: '',\n  email: '',\n  // token: null,\n  // isLoggedIn: false,\n};\n//авторизация - вход - выход\nconst user = createReducer(\n  initialUserState,\n\n  {\n    [registerSuccess]: (_, { payload }) => payload.user,\n    [logInSuccess]: (_, { payload }) => payload.user,\n    [logOutSuccess]: () => initialUserState, //сбрасывем в исходное состояние\n    [getUserSuccess]: (_, { payload }) => payload,\n  },\n);\n//авторизация\nconst isLoggedIn = createReducer(false, {\n  //[registerRequest]: () => true,\n  [registerSuccess]: () => true,\n  [registerError]: () => false,\n\n  //[logInRequest]: () => true,\n  [logInSuccess]: () => true,\n  [logInError]: () => false,\n\n  //[getUserRequest]: () => true,\n  [getUserSuccess]: () => true,\n  [getUserError]: () => false,\n\n  [logOutRequest]: () => false,\n  //[logOutSuccess]: () => false,\n  //[logOutError]: () => false,\n});\n\nconst token = createReducer(\n  null,\n\n  {\n    [registerSuccess]: (_, { payload }) => payload.token,\n    [logInSuccess]: (_, { payload }) => payload.token,\n    [logOutSuccess]: () => null,\n    [getUserSuccess]: (_, { payload }) => payload.token,\n  },\n);\nexport default combineReducers({\n  user,\n  isLoggedIn,\n  token,\n});\n","import contactsReducer from './contacts/reducer';\n//import authReducer from './auth/auth-slice';\nimport { authReducer } from './auth';\n// const store = configureStore({ reducer: contactsReducer, authReducer });\n\nimport {\n  configureStore,\n  //getDefaultMiddleware\n} from '@reduxjs/toolkit';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contactsReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\nexport default store;\n","export const getisLoggedIn = state => state.auth.isLoggedIn;\nexport const getUserName = state => state.auth.user.name;\n\n// const authSelectors = {\n//   getisLoggedIn,\n//   getUserName,\n// };\n\n// export default authSelectors;\n\n// //композитный(составной)селектор - переношу логику из контактЛист- мемоизирую селектор\n// export const getNormolizedContacts = createSelector(\n//   [getContacts, getFilter],\n//   (contacts, filter) => {\n//     //если контактс и фильтр не изменились - перерендер не выполняется а берется последний - глубина кэша 1\n//     const normolizedContactsFilter = filter.toLowerCase();\n//     return contacts.filter(contact => {\n//       return contact.name.toLowerCase().includes(normolizedContactsFilter);\n//     });\n//   },\n// );\n","import { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst PublicRoute = ({ children, restricted = false, ...rest }) => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n  return (\n    <Route {...rest}>\n      {shouldRedirect ? <Redirect to=\"/contacts\" /> : children}\n    </Route>\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n};\n\nexport default function AuthNav() {\n  return (\n    <div>\n      <NavLink\n        to=\"/register\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Регистрация\n      </NavLink>\n      <NavLink\n        to=\"/login\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Логин\n      </NavLink>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'redux/auth/auth-operations';\nimport { getUserName } from 'redux/auth/auth-selectors';\n//import defaultAvatar from './default-avatar.png';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 4,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 12,\n  },\n};\n\nexport default function UserMenu() {\n  const dispatch = useDispatch();\n  const name = useSelector(getUserName);\n  //const avatar = defaultAvatar;\n\n  return (\n    <div style={styles.container}>\n      {/* <img src={avatar} alt=\"\" width=\"32\" style={styles.avatar} /> */}\n      <span style={styles.name}>Glad to see you, {name}</span>\n      <button type=\"button\" onClick={() => dispatch(logout())}>\n        Выйти\n      </button>\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport styles from './Navigation.module.css';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst Navigation = () => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  return (\n    <nav className={styles.nav}>\n      {/* <NavLink\n      to=\"/register\"\n      exact\n      className={styles.link}\n      activeClassName={styles.activeLink}\n    >\n      Registration\n    </NavLink> */}\n      <NavLink\n        to=\"/\"\n        className={styles.link}\n        activeClassName={styles.activeLink}\n      >\n        StartPage\n      </NavLink>\n      {isLoggedIn && (\n        <NavLink\n          to=\"/contacts\"\n          className={styles.link}\n          activeClassName={styles.activeLink}\n        >\n          Contacts\n        </NavLink>\n      )}\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import { useSelector } from 'react-redux';\nimport AuthNav from 'components/AuthNav/AuthNav';\nimport UserMenu from 'components/UserMenu/UserMenu';\nimport Navigation from '../Navigation/Navigation';\nimport styles from './AppBar.module.css';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nexport default function AppBar() {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  return (\n    <header className={styles.header}>\n      <Navigation />\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  return (\n    <Route {...rest}>\n      {isLoggedIn ? children : <Redirect to=\"/login\" />}\n      {/* render={props => */}\n      {/* //   localStorage.getItem('idToken') ? (\n      //     <Component {...props} />\n      //   ) : (\n      //     <Redirect to=\"/\" />\n      //   )\n      // } */}\n    </Route>\n  );\n};\n\nexport default PrivateRoute;\n","import { Fragment } from 'react';\n//import { useDispatch } from 'react-redux';\nimport { useEffect, Suspense, lazy } from 'react';\nimport { useDispatch } from 'react-redux';\n//import { fetchContact, deleteContact } from 'redux/contacts/operations';\nimport './App.css';\nimport React from 'react';\nimport PublicRoute from 'components/PublicRoute/PublicRoute';\nimport ContactsForm from 'components/ContactsForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport AppBar from 'components/AppBar/AppBar';\nimport { Switch } from 'react-router-dom';\n\nimport { getUser } from 'redux/auth/auth-operations';\nimport PrivateRoute from 'components/PrivateRoute/PrivateRoute';\n\nconst StartPage = lazy(() => import('views/StartPage/StartPage'));\nconst RegisterView = lazy(() => import('views/Register/RegisterView'));\nconst LoginView = lazy(() => import('views/Login/Login'));\nconst Contacts = lazy(() => import('views/Contacts/Contacts'));\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(getUser()), [dispatch]);\n  return (\n    <Fragment>\n      <AppBar />\n\n      <Switch>\n        <Suspense fallback={<p>Loading...</p>}>\n          <PublicRoute path=\"/\" exact component={StartPage} />\n          <PublicRoute restricted path=\"/register\" component={RegisterView} />\n          <PublicRoute restricted path=\"/login\" component={LoginView} />\n          <PrivateRoute path=\"/contacts\">\n            <Contacts />\n          </PrivateRoute>\n        </Suspense>\n      </Switch>\n    </Fragment>\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.itemsValue,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     handleSubmit: () => dispatch(actions.addContact()),\n//     handleRemoveContact: () => dispatch(actions.deleteContact()),\n//     //onChangeFilter: () => dispatch(),\n//     onFilterName: () => dispatch(actions.filterContact()),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nexport default App;\n","//import store from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport store, { persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//console.log('store', store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
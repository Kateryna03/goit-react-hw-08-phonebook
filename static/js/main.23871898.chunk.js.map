{"version":3,"sources":["components/Navigation/Navigation.module.css","redux/auth/auth-operations.js","redux/auth/auth-actions.js","components/AppBar/AppBar.module.css","redux/contacts/reducer.js","redux/auth/auth-slice.js","redux/store.js","redux/auth/auth-selectors.js","components/PublicRoute/PublicRoute.js","components/AuthNav/AuthNav.js","components/UserMenu/UserMenu.js","components/Navigation/Navigation.js","components/AppBar/AppBar.jsx","components/PrivateRoute/PrivateRoute.jsx","App/App.js","index.js","redux/contacts/actions.js"],"names":["module","exports","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","registerRequest","post","data","console","log","registerSuccess","registerError","message","login","logInRequest","logInSuccess","logInError","logout","logOutRequest","logOutSuccess","logOutError","getUser","getState","persistedToken","auth","getUserRequest","get","getUserSuccess","getUserError","createAction","contacts","createReducer","fetchContactSuccess","_","payload","addContactSuccess","state","deleteContactSuccess","filter","id","filterContacts","loading","fetchContactRequest","fetchContactError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","combineReducers","initialUserState","name","email","user","isLoggedIn","refreshingUser","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","getisLoggedIn","getUserName","getRefreshingUser","PublicRoute","children","restricted","rest","shouldRedirect","useSelector","to","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","AuthNav","exact","style","activeStyle","container","alignItems","avatar","marginRight","UserMenu","useDispatch","type","onClick","Navigation","className","nav","activeClassName","AppBar","header","PrivateRoute","StartPage","lazy","RegisterView","LoginView","Contacts","App","isRefreshCurrentUser","useEffect","fallback","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23871898.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__12o2K\",\"activeLink\":\"Navigation_activeLink__2rUFB\",\"nav\":\"Navigation_nav__INfuO\",\"search\":\"Navigation_search__3dsyO\"};","// //import { createAction } from '@reduxjs/toolkit';\n// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n// import { registerError } from './auth-actions';\n\n// // import {\n// //   addContactRequest,\n// //   addContactSuccess,\n// //   addContactError,\n// //   deleteContactRequest,\n// //   deleteContactSuccess,\n// //   deleteContactError,\n// //   fetchContactRequest,\n// //   fetchContactSuccess,\n// //   fetchContactError,\n// // } from './actions';\n\n// // 'https://connections-api.herokuapp.com;';\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com;';\n\n// // const fetchContact = () => async dispatch => {\n// //   dispatch(fetchContactRequest());\n// //   try {\n// //     const { data } = await axios.get('/contacts');\n// //     dispatch(fetchContactSuccess(data));\n// //   } catch (error) {\n// //     dispatch(fetchContactError(error.message));\n\n// export { register, logIn, logOut };\nimport axios from 'axios';\nimport {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logInRequest,\n  logInSuccess,\n  logInError,\n  logOutRequest,\n  logOutSuccess,\n  logOutError,\n  getUserRequest,\n  getUserSuccess,\n  getUserError,\n} from '../auth/auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n//registration\nconst register = credentials => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n    console.log('####register DATA', data);\n    token.set(data.token);\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    dispatch(registerError(error.message));\n  }\n};\n// const register = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/signup', credentials);\n//     return data;\n//   } catch (error) {\n//     //dispatch(registerError(error));\n//     console.log(error.message);\n//   }\n// });\n\nconst login = credentials => async dispatch => {\n  dispatch(logInRequest());\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n    console.log('####Login DATA', data);\n    token.set(data.token); //обязательно сохраняем токен ктр автоматом после сохранения будет при любом запросе\n    dispatch(logInSuccess(data));\n  } catch (error) {\n    dispatch(logInError(error.message));\n  }\n};\n// const logIn = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/login', credentials);\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// });\nconst logout = credentials => async dispatch => {\n  dispatch(logOutRequest());\n  try {\n    const { data } = await axios.post('/users/logout', credentials);\n    console.log('####Login DATA', data);\n    console.log('###Credentials', credentials);\n    token.unset(data.token); //снимаем токен с загаловка\n    dispatch(logOutSuccess(data));\n  } catch (error) {\n    dispatch(logOutError(error.message));\n  }\n};\n// const logOut = createAsyncThunk('auth/register', async credentials => {\n//   try {\n//     const { data } = await axios.post('/users/logout', credentials);\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// });\nconst getUser = () => async (dispatch, getState) => {\n  // console.log('getStateTOKEN:', getState(token));\n  // auth:\n  // isLoggedIn: true\n  // token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTY1NWEzZjdiYjg0YjAwMTUyZDY4MjgiLCJpYXQiOjE2MzQwNzEzMjh9.gaJJbnd-VmRCCmPchBGA8oi1JO6eGdOoshYePLgDtKk\"\n  // user: {name: 'Okeksii', email: 'oleksii@gmail.com'}\n\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) return;\n\n  token.set(persistedToken);\n\n  dispatch(getUserRequest());\n\n  try {\n    const { data } = await axios.get('/users/current');\n    dispatch(getUserSuccess(data));\n  } catch (error) {\n    dispatch(getUserError(error.message));\n  }\n};\n// const fetchCurrentUser = createAsyncThunk(\n//   'auth/refresh',\n//   async (_, thunkAPI) => {\n//     const state = thunkAPI.getState();\n//     const persistedToken = state.auth.token;\n\n//     if (persistedToken === null) {\n//       console.log('Токена нет, уходим из fetchCurrentUser');\n//       return thunkAPI.rejectWithValue();\n//     }\n\n//     token.set(persistedToken);\n//     try {\n//       const { data } = await axios.get('/users/current');\n//       return data;\n//     } catch (error) {\n//       // TODO: Добавить обработку ошибки error.message\n//     }\n//   },\n// );\n\nexport { register, login, logout, getUser };\n","import { createAction } from '@reduxjs/toolkit';\n\n//register - 3 экшна, чтоб забрать\nexport const registerRequest = createAction('auth/registerRequest');\nexport const registerSuccess = createAction('auth/registerSuccess');\nexport const registerError = createAction('auth/registerError');\n\n//login\nexport const logInRequest = createAction('auth/logInRequest');\nexport const logInSuccess = createAction('auth/logInSuccess');\nexport const logInError = createAction('auth/logInError');\n//logout\n\nexport const logOutRequest = createAction('auth/logOutRequest');\nexport const logOutSuccess = createAction('auth/logOutSuccess');\nexport const logOutError = createAction('auth/logOutError');\n\n//Current User\n\nexport const getUserRequest = createAction('auth/getUserRequest');\nexport const getUserSuccess = createAction('auth/getUserSuccess');\nexport const getUserError = createAction('auth/getUserError');\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__1Yk8v\"};","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  addContactError,\n  addContactRequest,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from '../contacts/actions';\n\n// const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\nconst contacts = createReducer(\n  // localStorageContacts ??\n  [\n    // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => {\n      const inContacts = [payload, ...state];\n      // localStorage.setItem('contacts', JSON.stringify(inContacts));\n      return inContacts;\n    },\n\n    [deleteContactSuccess]: (state, { payload }) => {\n      const removedFromContacts = state.filter(({ id }) => id !== payload);\n      // localStorage.setItem('contacts', JSON.stringify(removedFromContacts));\n      return removedFromContacts;\n    },\n  },\n);\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\nexport default combineReducers({ contacts, filter, loading });\n","// import { register, logIn, logOut } from '../auth/auth-operations';\n// import { createSlice } from '@reduxjs/toolkit';\n\n// // const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\n// const initialState = {\n//   user: { name: null, email: null },\n//   token: null,\n//   isLoggedIn: false,\n// };\n\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   extraReducers: {\n//     [register.fulfilled](state, action) {\n//       state.user = action.payload.user;\n//       state.token = action.payload.token;\n//       state.isLoggedIn = true;\n//     },\n//     [logIn.fulfilled](state, action) {\n//       state.user = action.payload.user;\n//       state.token = action.payload.token;\n//       state.isLoggedIn = true;\n//     },\n//     [logOut.fulfilled](state, action) {\n//       state.user = { name: null, email: null };\n//       state.token = null;\n//       state.isLoggedIn = false;\n//     },\n//     // [authOperations.fetchCurrentUser.fulfilled](state, action) {\n//     //   state.user = action.payload;\n//     //   state.isLoggedIn = true;\n//     // },\n//   },\n// });\n\n// export default authSlice.reducer;\n///////////////////////////////////////////////////////////////////////////\n//import { combineReducers } from 'redux';\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  registerSuccess,\n  registerError,\n  registerRequest,\n  logInRequest,\n  logInSuccess,\n  logInError,\n  logOutRequest,\n  logOutSuccess,\n  logOutError,\n  getUserRequest,\n  getUserSuccess,\n  getUserError,\n} from '../auth/auth-actions';\n\n// const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\nconst initialUserState = {\n  name: '',\n  email: '',\n  //isGetUser: false,\n  // token: null,\n  // isLoggedIn: false,\n};\n//авторизация - вход - выход\nconst user = createReducer(\n  initialUserState,\n\n  {\n    [registerSuccess]: (_, { payload }) => payload.user,\n    [logInSuccess]: (_, { payload }) => payload.user,\n    [logOutSuccess]: () => initialUserState, //сбрасывем в исходное состояние\n    [getUserSuccess]: (_, { payload }) => payload,\n  },\n);\n//авторизация\nconst isLoggedIn = createReducer(false, {\n  //[registerRequest]: () => true,\n  [registerSuccess]: () => true,\n  [registerError]: () => false,\n\n  //[logInRequest]: () => true,\n  [logInSuccess]: () => true,\n  [logInError]: () => false,\n  ///555555\n  //[getUserRequest]: () => true,\n  [getUserSuccess]: () => true,\n  [getUserError]: () => false,\n\n  [logOutRequest]: () => false,\n  //[logOutSuccess]: () => false,\n  //[logOutError]: () => false,\n});\n\nconst token = createReducer(\n  null,\n\n  {\n    [registerSuccess]: (_, { payload }) => payload.token,\n    [logInSuccess]: (_, { payload }) => payload.token,\n    [logOutSuccess]: () => null,\n    //[getUserSuccess]: (_, { payload }) => payload.token, - если оставляю при пепезагрузке не из контактов выкидывает на логин\n  },\n);\n//убираю флеш при перезагрузке стр\nconst refreshingUser = createReducer(\n  false,\n\n  {\n    [getUserRequest]: () => true,\n    [getUserSuccess]: () => false,\n    [getUserError]: () => false,\n    //[getUserSuccess]: (_, { payload }) => payload.token, - если оставляю при пепезагрузке не из контактов выкидывает на логин\n  },\n);\n\nexport default combineReducers({\n  user,\n  isLoggedIn,\n  token,\n  refreshingUser,\n});\n","import contactsReducer from './contacts/reducer';\n//import authReducer from './auth/auth-slice';\nimport { authReducer } from './auth';\n// const store = configureStore({ reducer: contactsReducer, authReducer });\n\nimport {\n  configureStore,\n  //getDefaultMiddleware\n} from '@reduxjs/toolkit';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contactsReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\nexport default store;\n","export const getisLoggedIn = state => state.auth.isLoggedIn;\nexport const getUserName = state => state.auth.user.name;\nexport const getRefreshingUser = state => state.auth.refreshingUser;\n\n// const authSelectors = {\n//   getisLoggedIn,\n//   getUserName,\n// };\n\n// export default authSelectors;\n\n// //композитный(составной)селектор - переношу логику из контактЛист- мемоизирую селектор\n// export const getNormolizedContacts = createSelector(\n//   [getContacts, getFilter],\n//   (contacts, filter) => {\n//     //если контактс и фильтр не изменились - перерендер не выполняется а берется последний - глубина кэша 1\n//     const normolizedContactsFilter = filter.toLowerCase();\n//     return contacts.filter(contact => {\n//       return contact.name.toLowerCase().includes(normolizedContactsFilter);\n//     });\n//   },\n// );\n","import { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst PublicRoute = ({ children, restricted = false, ...rest }) => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n  return (\n    <Route {...rest}>\n      {shouldRedirect ? <Redirect to=\"/contacts\" /> : children}\n    </Route>\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n};\n\nexport default function AuthNav() {\n  return (\n    <div>\n      <NavLink\n        to=\"/register\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Регистрация\n      </NavLink>\n      <NavLink\n        to=\"/login\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Логин\n      </NavLink>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'redux/auth/auth-operations';\nimport { getUserName } from 'redux/auth/auth-selectors';\n//import defaultAvatar from './default-avatar.png';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 4,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 12,\n  },\n};\n\nexport default function UserMenu() {\n  const dispatch = useDispatch();\n  const name = useSelector(getUserName);\n  //const avatar = defaultAvatar;\n\n  return (\n    <div style={styles.container}>\n      {/* <img src={avatar} alt=\"\" width=\"32\" style={styles.avatar} /> */}\n      <span style={styles.name}>Glad to see you, {name}</span>\n      <button type=\"button\" onClick={() => dispatch(logout())}>\n        Выйти\n      </button>\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport styles from './Navigation.module.css';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst Navigation = () => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  return (\n    <nav className={styles.nav}>\n      <NavLink\n        to=\"/\"\n        className={styles.link}\n        activeClassName={styles.activeLink}\n      >\n        StartPage\n      </NavLink>\n      {isLoggedIn && (\n        <NavLink\n          to=\"/contacts\"\n          className={styles.link}\n          activeClassName={styles.activeLink}\n        >\n          Contacts\n        </NavLink>\n      )}\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import { useSelector } from 'react-redux';\nimport AuthNav from 'components/AuthNav/AuthNav';\nimport UserMenu from 'components/UserMenu/UserMenu';\nimport Navigation from '../Navigation/Navigation';\nimport styles from './AppBar.module.css';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nexport default function AppBar() {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  return (\n    <header className={styles.header}>\n      <Navigation />\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getisLoggedIn } from 'redux/auth/auth-selectors';\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const isLoggedIn = useSelector(getisLoggedIn);\n  console.log('isLOGGEDiN', isLoggedIn);\n  return (\n    <Route {...rest}>\n      {isLoggedIn ? children : <Redirect to=\"/login\" />}\n\n      {/* render={props => */}\n      {/* //   localStorage.getItem('idToken') ? (\n      //     <Component {...props} />\n      //   ) : (\n      //     <Redirect to=\"/\" />\n      //   )\n      // } */}\n    </Route>\n  );\n};\n\nexport default PrivateRoute;\n","import { Fragment } from 'react';\n\nimport { useEffect, Suspense, lazy } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.css';\nimport React from 'react';\nimport PublicRoute from 'components/PublicRoute/PublicRoute';\nimport AppBar from 'components/AppBar/AppBar';\nimport { Switch } from 'react-router-dom';\nimport { getRefreshingUser } from 'redux/auth/auth-selectors';\nimport { getUser } from 'redux/auth/auth-operations';\nimport PrivateRoute from 'components/PrivateRoute/PrivateRoute';\n\nconst StartPage = lazy(() => import('views/StartPage/StartPage'));\nconst RegisterView = lazy(() => import('views/Register/RegisterView'));\nconst LoginView = lazy(() => import('views/Login/Login'));\nconst Contacts = lazy(() => import('views/Contacts/Contacts'));\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isRefreshCurrentUser = useSelector(getRefreshingUser);\n  console.log('RefreshCurrentUser', isRefreshCurrentUser);\n  //при перезагрузке стр - проверяет валидный ли токен\n  useEffect(() => {\n    dispatch(getUser());\n  }, [dispatch]);\n\n  return (\n    !isRefreshCurrentUser && (\n      <Fragment>\n        <AppBar />\n\n        <Switch>\n          <Suspense fallback>\n            <PublicRoute path=\"/\" exact component={StartPage} />\n            <PublicRoute restricted path=\"/register\" component={RegisterView} />\n            <PublicRoute restricted path=\"/login\" component={LoginView} />\n            <PrivateRoute path=\"/contacts\">\n              <Contacts />\n            </PrivateRoute>\n          </Suspense>\n        </Switch>\n      </Fragment>\n    )\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.itemsValue,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     handleSubmit: () => dispatch(actions.addContact()),\n//     handleRemoveContact: () => dispatch(actions.deleteContact()),\n//     //onChangeFilter: () => dispatch(),\n//     onFilterName: () => dispatch(actions.filterContact()),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nexport default App;\n","//import store from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport store, { persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//console.log('store', store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","import { createAction } from '@reduxjs/toolkit';\n\n//FETCH - 3 экшна, чтоб забрать\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\n//ADD CONTACT\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n//DELETE CONTACT\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/FilterContact');\n"],"sourceRoot":""}